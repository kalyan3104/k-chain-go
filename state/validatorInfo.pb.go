// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validatorInfo.proto

package state

import (
	bytes "bytes"
	encoding_binary "encoding/binary"
	fmt "fmt"
	github_com_kalyan3104_k_chain_core_go_data "github.com/kalyan3104/k-chain-core-go/data"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValidatorInfo represents the data regarding a validator that is verified by the metaNodes
type ValidatorInfo struct {
	PublicKey                       []byte        `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"publicKey"`
	ShardId                         uint32        `protobuf:"varint,2,opt,name=ShardId,proto3" json:"shardId"`
	List                            string        `protobuf:"bytes,3,opt,name=List,proto3" json:"list"`
	Index                           uint32        `protobuf:"varint,4,opt,name=Index,proto3" json:"index"`
	TempRating                      uint32        `protobuf:"varint,5,opt,name=TempRating,proto3" json:"tempRating"`
	Rating                          uint32        `protobuf:"varint,6,opt,name=Rating,proto3" json:"rating"`
	RatingModifier                  float32       `protobuf:"fixed32,7,opt,name=RatingModifier,proto3" json:"ratingModifier"`
	RewardAddress                   []byte        `protobuf:"bytes,8,opt,name=RewardAddress,proto3" json:"rewardAddress,omitempty"`
	LeaderSuccess                   uint32        `protobuf:"varint,9,opt,name=LeaderSuccess,proto3" json:"leaderSuccess"`
	LeaderFailure                   uint32        `protobuf:"varint,10,opt,name=LeaderFailure,proto3" json:"leaderFailure"`
	ValidatorSuccess                uint32        `protobuf:"varint,11,opt,name=ValidatorSuccess,proto3" json:"validatorSuccess"`
	ValidatorFailure                uint32        `protobuf:"varint,12,opt,name=ValidatorFailure,proto3" json:"validatorFailure"`
	ValidatorIgnoredSignatures      uint32        `protobuf:"varint,13,opt,name=ValidatorIgnoredSignatures,proto3" json:"validatorIgnoredSignatures"`
	NumSelectedInSuccessBlocks      uint32        `protobuf:"varint,14,opt,name=NumSelectedInSuccessBlocks,proto3" json:"numSelectedInSuccessBlocks"`
	AccumulatedFees                 *math_big.Int `protobuf:"bytes,15,opt,name=AccumulatedFees,proto3,casttypewith=math/big.Int;github.com/kalyan3104/k-chain-core-go/data.BigIntCaster" json:"accumulatedFees,omitempty"`
	TotalLeaderSuccess              uint32        `protobuf:"varint,16,opt,name=TotalLeaderSuccess,proto3" json:"totalLeaderSuccess"`
	TotalLeaderFailure              uint32        `protobuf:"varint,17,opt,name=TotalLeaderFailure,proto3" json:"totalLeaderFailure"`
	TotalValidatorSuccess           uint32        `protobuf:"varint,18,opt,name=TotalValidatorSuccess,proto3" json:"totalValidatorSuccess"`
	TotalValidatorFailure           uint32        `protobuf:"varint,19,opt,name=TotalValidatorFailure,proto3" json:"totalValidatorFailure"`
	TotalValidatorIgnoredSignatures uint32        `protobuf:"varint,20,opt,name=TotalValidatorIgnoredSignatures,proto3" json:"totalValidatorIgnoredSignatures"`
	PreviousList                    string        `protobuf:"bytes,21,opt,name=PreviousList,proto3" json:"previousList,omitempty"`
	PreviousIndex                   uint32        `protobuf:"varint,22,opt,name=PreviousIndex,proto3" json:"previousIndex,omitempty"`
}

func (m *ValidatorInfo) Reset()      { *m = ValidatorInfo{} }
func (*ValidatorInfo) ProtoMessage() {}
func (*ValidatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf9cdc082f0b2ec2, []int{0}
}
func (m *ValidatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ValidatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorInfo.Merge(m, src)
}
func (m *ValidatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorInfo proto.InternalMessageInfo

func (m *ValidatorInfo) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *ValidatorInfo) GetShardId() uint32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *ValidatorInfo) GetList() string {
	if m != nil {
		return m.List
	}
	return ""
}

func (m *ValidatorInfo) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ValidatorInfo) GetTempRating() uint32 {
	if m != nil {
		return m.TempRating
	}
	return 0
}

func (m *ValidatorInfo) GetRating() uint32 {
	if m != nil {
		return m.Rating
	}
	return 0
}

func (m *ValidatorInfo) GetRatingModifier() float32 {
	if m != nil {
		return m.RatingModifier
	}
	return 0
}

func (m *ValidatorInfo) GetRewardAddress() []byte {
	if m != nil {
		return m.RewardAddress
	}
	return nil
}

func (m *ValidatorInfo) GetLeaderSuccess() uint32 {
	if m != nil {
		return m.LeaderSuccess
	}
	return 0
}

func (m *ValidatorInfo) GetLeaderFailure() uint32 {
	if m != nil {
		return m.LeaderFailure
	}
	return 0
}

func (m *ValidatorInfo) GetValidatorSuccess() uint32 {
	if m != nil {
		return m.ValidatorSuccess
	}
	return 0
}

func (m *ValidatorInfo) GetValidatorFailure() uint32 {
	if m != nil {
		return m.ValidatorFailure
	}
	return 0
}

func (m *ValidatorInfo) GetValidatorIgnoredSignatures() uint32 {
	if m != nil {
		return m.ValidatorIgnoredSignatures
	}
	return 0
}

func (m *ValidatorInfo) GetNumSelectedInSuccessBlocks() uint32 {
	if m != nil {
		return m.NumSelectedInSuccessBlocks
	}
	return 0
}

func (m *ValidatorInfo) GetAccumulatedFees() *math_big.Int {
	if m != nil {
		return m.AccumulatedFees
	}
	return nil
}

func (m *ValidatorInfo) GetTotalLeaderSuccess() uint32 {
	if m != nil {
		return m.TotalLeaderSuccess
	}
	return 0
}

func (m *ValidatorInfo) GetTotalLeaderFailure() uint32 {
	if m != nil {
		return m.TotalLeaderFailure
	}
	return 0
}

func (m *ValidatorInfo) GetTotalValidatorSuccess() uint32 {
	if m != nil {
		return m.TotalValidatorSuccess
	}
	return 0
}

func (m *ValidatorInfo) GetTotalValidatorFailure() uint32 {
	if m != nil {
		return m.TotalValidatorFailure
	}
	return 0
}

func (m *ValidatorInfo) GetTotalValidatorIgnoredSignatures() uint32 {
	if m != nil {
		return m.TotalValidatorIgnoredSignatures
	}
	return 0
}

func (m *ValidatorInfo) GetPreviousList() string {
	if m != nil {
		return m.PreviousList
	}
	return ""
}

func (m *ValidatorInfo) GetPreviousIndex() uint32 {
	if m != nil {
		return m.PreviousIndex
	}
	return 0
}

// ShardValidatorInfo represents the data regarding a validator that is stored in the PeerMiniblocks
type ShardValidatorInfo struct {
	PublicKey     []byte `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"publicKey"`
	ShardId       uint32 `protobuf:"varint,2,opt,name=ShardId,proto3" json:"shardId"`
	List          string `protobuf:"bytes,3,opt,name=List,proto3" json:"list,omitempty"`
	Index         uint32 `protobuf:"varint,4,opt,name=Index,proto3" json:"index"`
	TempRating    uint32 `protobuf:"varint,5,opt,name=TempRating,proto3" json:"tempRating"`
	PreviousList  string `protobuf:"bytes,6,opt,name=PreviousList,proto3" json:"previousList,omitempty"`
	PreviousIndex uint32 `protobuf:"varint,7,opt,name=PreviousIndex,proto3" json:"previousIndex,omitempty"`
}

func (m *ShardValidatorInfo) Reset()      { *m = ShardValidatorInfo{} }
func (*ShardValidatorInfo) ProtoMessage() {}
func (*ShardValidatorInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bf9cdc082f0b2ec2, []int{1}
}
func (m *ShardValidatorInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShardValidatorInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *ShardValidatorInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShardValidatorInfo.Merge(m, src)
}
func (m *ShardValidatorInfo) XXX_Size() int {
	return m.Size()
}
func (m *ShardValidatorInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ShardValidatorInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ShardValidatorInfo proto.InternalMessageInfo

func (m *ShardValidatorInfo) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *ShardValidatorInfo) GetShardId() uint32 {
	if m != nil {
		return m.ShardId
	}
	return 0
}

func (m *ShardValidatorInfo) GetList() string {
	if m != nil {
		return m.List
	}
	return ""
}

func (m *ShardValidatorInfo) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ShardValidatorInfo) GetTempRating() uint32 {
	if m != nil {
		return m.TempRating
	}
	return 0
}

func (m *ShardValidatorInfo) GetPreviousList() string {
	if m != nil {
		return m.PreviousList
	}
	return ""
}

func (m *ShardValidatorInfo) GetPreviousIndex() uint32 {
	if m != nil {
		return m.PreviousIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*ValidatorInfo)(nil), "proto.ValidatorInfo")
	proto.RegisterType((*ShardValidatorInfo)(nil), "proto.ShardValidatorInfo")
}

func init() { proto.RegisterFile("validatorInfo.proto", fileDescriptor_bf9cdc082f0b2ec2) }

var fileDescriptor_bf9cdc082f0b2ec2 = []byte{
	// 774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcf, 0x6e, 0xe3, 0x44,
	0x18, 0x8f, 0x4b, 0x93, 0x34, 0xd3, 0x26, 0x6d, 0xa7, 0x7f, 0x70, 0x03, 0xf2, 0x44, 0x45, 0xa0,
	0x48, 0x90, 0xe4, 0xc0, 0x01, 0x09, 0x24, 0xa0, 0x01, 0x15, 0x45, 0x14, 0x5a, 0x4d, 0x2a, 0x0e,
	0x1c, 0x90, 0x26, 0xf6, 0xd4, 0x19, 0xe1, 0xd8, 0xd1, 0x78, 0x1c, 0xe8, 0x8d, 0x47, 0x40, 0x3c,
	0x05, 0xe2, 0x49, 0x38, 0xf6, 0xd8, 0xd3, 0xec, 0xd6, 0xed, 0x61, 0x35, 0xa7, 0x3e, 0xc2, 0x2a,
	0x93, 0xb8, 0xb1, 0x93, 0xb4, 0xab, 0xd5, 0xaa, 0xa7, 0x78, 0xbe, 0xdf, 0x1f, 0x7f, 0x33, 0xdf,
	0xe4, 0x67, 0xb0, 0x33, 0x22, 0x1e, 0x73, 0x88, 0x08, 0x78, 0xc7, 0xbf, 0x08, 0x9a, 0x43, 0x1e,
	0x88, 0x00, 0xe6, 0xf5, 0x4f, 0xb5, 0xe1, 0x32, 0xd1, 0x8f, 0x7a, 0x4d, 0x3b, 0x18, 0xb4, 0xdc,
	0xc0, 0x0d, 0x5a, 0xba, 0xdc, 0x8b, 0x2e, 0xf4, 0x4a, 0x2f, 0xf4, 0xd3, 0x44, 0x75, 0x78, 0xb7,
	0x0e, 0xca, 0xbf, 0xa4, 0xdd, 0xe0, 0xa7, 0xa0, 0x74, 0x16, 0xf5, 0x3c, 0x66, 0xff, 0x48, 0x2f,
	0x4d, 0xa3, 0x66, 0xd4, 0x37, 0xda, 0x65, 0x25, 0x51, 0x69, 0x98, 0x14, 0xf1, 0x0c, 0x87, 0x1f,
	0x83, 0x62, 0xb7, 0x4f, 0xb8, 0xd3, 0x71, 0xcc, 0x95, 0x9a, 0x51, 0x2f, 0xb7, 0xd7, 0x95, 0x44,
	0xc5, 0x70, 0x52, 0xc2, 0x09, 0x06, 0x3f, 0x04, 0xab, 0x27, 0x2c, 0x14, 0xe6, 0x7b, 0x35, 0xa3,
	0x5e, 0x6a, 0xaf, 0x29, 0x89, 0x56, 0x3d, 0x16, 0x0a, 0xac, 0xab, 0x10, 0x81, 0x7c, 0xc7, 0x77,
	0xe8, 0x9f, 0xe6, 0xaa, 0xb6, 0x28, 0x29, 0x89, 0xf2, 0x6c, 0x5c, 0xc0, 0x93, 0x3a, 0x6c, 0x02,
	0x70, 0x4e, 0x07, 0x43, 0x4c, 0x04, 0xf3, 0x5d, 0x33, 0xaf, 0x59, 0x15, 0x25, 0x11, 0x10, 0x0f,
	0x55, 0x9c, 0x62, 0xc0, 0x43, 0x50, 0x98, 0x72, 0x0b, 0x9a, 0x0b, 0x94, 0x44, 0x05, 0x3e, 0xe1,
	0x4d, 0x11, 0xf8, 0x25, 0xa8, 0x4c, 0x9e, 0x7e, 0x0a, 0x1c, 0x76, 0xc1, 0x28, 0x37, 0x8b, 0x35,
	0xa3, 0xbe, 0xd2, 0x86, 0x4a, 0xa2, 0x0a, 0xcf, 0x20, 0x78, 0x8e, 0x09, 0x8f, 0x40, 0x19, 0xd3,
	0x3f, 0x08, 0x77, 0x8e, 0x1c, 0x87, 0xd3, 0x30, 0x34, 0xd7, 0xf4, 0x31, 0x7d, 0xa0, 0x24, 0x7a,
	0x9f, 0xa7, 0x81, 0xcf, 0x82, 0x01, 0x1b, 0xf7, 0x28, 0x2e, 0x71, 0x56, 0x01, 0xbf, 0x00, 0xe5,
	0x13, 0x4a, 0x1c, 0xca, 0xbb, 0x91, 0x6d, 0x8f, 0x2d, 0x4a, 0xba, 0xd3, 0x6d, 0x25, 0x51, 0xd9,
	0x4b, 0x03, 0x38, 0xcb, 0x9b, 0x09, 0x8f, 0x09, 0xf3, 0x22, 0x4e, 0x4d, 0x30, 0x2f, 0x9c, 0x02,
	0x38, 0xcb, 0x83, 0xdf, 0x82, 0xad, 0x87, 0x41, 0x27, 0x2f, 0x5d, 0xd7, 0xda, 0x5d, 0x25, 0xd1,
	0xd6, 0x68, 0x0e, 0xc3, 0x0b, 0xec, 0x8c, 0x43, 0xf2, 0xf6, 0x8d, 0x25, 0x0e, 0x49, 0x03, 0x0b,
	0x6c, 0xf8, 0x1b, 0xa8, 0xce, 0x2e, 0x9b, 0xeb, 0x07, 0x9c, 0x3a, 0x5d, 0xe6, 0xfa, 0x44, 0x44,
	0x9c, 0x86, 0x66, 0x59, 0x7b, 0x59, 0x4a, 0xa2, 0xea, 0xe8, 0x51, 0x16, 0x7e, 0xc2, 0x61, 0xec,
	0xff, 0x73, 0x34, 0xe8, 0x52, 0x8f, 0xda, 0x82, 0x3a, 0x1d, 0x7f, 0xda, 0x79, 0xdb, 0x0b, 0xec,
	0xdf, 0x43, 0xb3, 0x32, 0xf3, 0xf7, 0x1f, 0x65, 0xe1, 0x27, 0x1c, 0xe0, 0x3f, 0x06, 0xd8, 0x3c,
	0xb2, 0xed, 0x68, 0x10, 0x79, 0x44, 0x50, 0xe7, 0x98, 0xd2, 0xd0, 0xdc, 0xd4, 0xb3, 0xef, 0x2b,
	0x89, 0x0e, 0x48, 0x16, 0x9a, 0x4d, 0xff, 0xbf, 0x17, 0xe8, 0x87, 0x01, 0x11, 0xfd, 0x56, 0x8f,
	0xb9, 0xcd, 0x8e, 0x2f, 0xbe, 0x4a, 0xfd, 0x49, 0xbf, 0xef, 0x13, 0xce, 0x04, 0x67, 0xa7, 0x3e,
	0x6d, 0x39, 0x5c, 0x34, 0xec, 0x3e, 0x61, 0x7e, 0xc3, 0x0e, 0x38, 0x6d, 0xb8, 0x41, 0xcb, 0x21,
	0x82, 0x34, 0xdb, 0xcc, 0xed, 0xf8, 0xe2, 0x3b, 0x12, 0x0a, 0xca, 0xf1, 0x7c, 0x03, 0xf0, 0x18,
	0xc0, 0xf3, 0x40, 0x10, 0x2f, 0x7b, 0x9f, 0xb6, 0xf4, 0x66, 0xf7, 0x95, 0x44, 0x50, 0x2c, 0xa0,
	0x78, 0x89, 0x62, 0xce, 0x27, 0x19, 0xf0, 0xf6, 0x52, 0x9f, 0x64, 0xc4, 0x4b, 0x14, 0xf0, 0x14,
	0xec, 0xe9, 0xea, 0xc2, 0x6d, 0x83, 0xda, 0xea, 0x40, 0x49, 0xb4, 0x27, 0x96, 0x11, 0xf0, 0x72,
	0xdd, 0xa2, 0x61, 0xd2, 0xdb, 0xce, 0x63, 0x86, 0x49, 0x7b, 0xcb, 0x75, 0x70, 0x00, 0x50, 0x16,
	0x58, 0xbc, 0x8b, 0xbb, 0xda, 0xfa, 0x23, 0x25, 0x11, 0x12, 0x4f, 0x53, 0xf1, 0x9b, 0xbc, 0xe0,
	0xd7, 0x60, 0xe3, 0x8c, 0xd3, 0x11, 0x0b, 0xa2, 0x50, 0xa7, 0xe0, 0x9e, 0x4e, 0xc1, 0xaa, 0x92,
	0x68, 0x7f, 0x98, 0xaa, 0xa7, 0xc2, 0x22, 0xc3, 0x1f, 0xc7, 0x4d, 0xb2, 0x9e, 0xe4, 0xe4, 0xbe,
	0x6e, 0x4e, 0xc7, 0xcd, 0x30, 0x0d, 0xa4, 0xe3, 0x26, 0xa3, 0x38, 0xbc, 0x5b, 0x01, 0x50, 0x87,
	0xf1, 0xf3, 0x67, 0xfd, 0x27, 0x99, 0xac, 0xd7, 0x71, 0xea, 0x65, 0x77, 0xf7, 0x4c, 0xa9, 0x3f,
	0x7f, 0xcc, 0x85, 0x77, 0x3d, 0xe6, 0xe2, 0xdb, 0x1e, 0x73, 0xfb, 0x9b, 0xab, 0x1b, 0x2b, 0x77,
	0x7d, 0x63, 0xe5, 0xee, 0x6f, 0x2c, 0xe3, 0xaf, 0xd8, 0x32, 0xfe, 0x8d, 0x2d, 0xe3, 0xff, 0xd8,
	0x32, 0xae, 0x62, 0xcb, 0xb8, 0x8e, 0x2d, 0xe3, 0x65, 0x6c, 0x19, 0xaf, 0x62, 0x2b, 0x77, 0x1f,
	0x5b, 0xc6, 0xdf, 0xb7, 0x56, 0xee, 0xea, 0xd6, 0xca, 0x5d, 0xdf, 0x5a, 0xb9, 0x5f, 0xf3, 0xa1,
	0x20, 0x82, 0xf6, 0x0a, 0xfa, 0xab, 0xfc, 0xf9, 0xeb, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xf7,
	0xf1, 0x9d, 0xe2, 0x07, 0x00, 0x00,
}

func (this *ValidatorInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorInfo)
	if !ok {
		that2, ok := that.(ValidatorInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if this.ShardId != that1.ShardId {
		return false
	}
	if this.List != that1.List {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.TempRating != that1.TempRating {
		return false
	}
	if this.Rating != that1.Rating {
		return false
	}
	if this.RatingModifier != that1.RatingModifier {
		return false
	}
	if !bytes.Equal(this.RewardAddress, that1.RewardAddress) {
		return false
	}
	if this.LeaderSuccess != that1.LeaderSuccess {
		return false
	}
	if this.LeaderFailure != that1.LeaderFailure {
		return false
	}
	if this.ValidatorSuccess != that1.ValidatorSuccess {
		return false
	}
	if this.ValidatorFailure != that1.ValidatorFailure {
		return false
	}
	if this.ValidatorIgnoredSignatures != that1.ValidatorIgnoredSignatures {
		return false
	}
	if this.NumSelectedInSuccessBlocks != that1.NumSelectedInSuccessBlocks {
		return false
	}
	{
		__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.AccumulatedFees, that1.AccumulatedFees) {
			return false
		}
	}
	if this.TotalLeaderSuccess != that1.TotalLeaderSuccess {
		return false
	}
	if this.TotalLeaderFailure != that1.TotalLeaderFailure {
		return false
	}
	if this.TotalValidatorSuccess != that1.TotalValidatorSuccess {
		return false
	}
	if this.TotalValidatorFailure != that1.TotalValidatorFailure {
		return false
	}
	if this.TotalValidatorIgnoredSignatures != that1.TotalValidatorIgnoredSignatures {
		return false
	}
	if this.PreviousList != that1.PreviousList {
		return false
	}
	if this.PreviousIndex != that1.PreviousIndex {
		return false
	}
	return true
}
func (this *ShardValidatorInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ShardValidatorInfo)
	if !ok {
		that2, ok := that.(ShardValidatorInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.PublicKey, that1.PublicKey) {
		return false
	}
	if this.ShardId != that1.ShardId {
		return false
	}
	if this.List != that1.List {
		return false
	}
	if this.Index != that1.Index {
		return false
	}
	if this.TempRating != that1.TempRating {
		return false
	}
	if this.PreviousList != that1.PreviousList {
		return false
	}
	if this.PreviousIndex != that1.PreviousIndex {
		return false
	}
	return true
}
func (this *ValidatorInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 26)
	s = append(s, "&state.ValidatorInfo{")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "ShardId: "+fmt.Sprintf("%#v", this.ShardId)+",\n")
	s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "TempRating: "+fmt.Sprintf("%#v", this.TempRating)+",\n")
	s = append(s, "Rating: "+fmt.Sprintf("%#v", this.Rating)+",\n")
	s = append(s, "RatingModifier: "+fmt.Sprintf("%#v", this.RatingModifier)+",\n")
	s = append(s, "RewardAddress: "+fmt.Sprintf("%#v", this.RewardAddress)+",\n")
	s = append(s, "LeaderSuccess: "+fmt.Sprintf("%#v", this.LeaderSuccess)+",\n")
	s = append(s, "LeaderFailure: "+fmt.Sprintf("%#v", this.LeaderFailure)+",\n")
	s = append(s, "ValidatorSuccess: "+fmt.Sprintf("%#v", this.ValidatorSuccess)+",\n")
	s = append(s, "ValidatorFailure: "+fmt.Sprintf("%#v", this.ValidatorFailure)+",\n")
	s = append(s, "ValidatorIgnoredSignatures: "+fmt.Sprintf("%#v", this.ValidatorIgnoredSignatures)+",\n")
	s = append(s, "NumSelectedInSuccessBlocks: "+fmt.Sprintf("%#v", this.NumSelectedInSuccessBlocks)+",\n")
	s = append(s, "AccumulatedFees: "+fmt.Sprintf("%#v", this.AccumulatedFees)+",\n")
	s = append(s, "TotalLeaderSuccess: "+fmt.Sprintf("%#v", this.TotalLeaderSuccess)+",\n")
	s = append(s, "TotalLeaderFailure: "+fmt.Sprintf("%#v", this.TotalLeaderFailure)+",\n")
	s = append(s, "TotalValidatorSuccess: "+fmt.Sprintf("%#v", this.TotalValidatorSuccess)+",\n")
	s = append(s, "TotalValidatorFailure: "+fmt.Sprintf("%#v", this.TotalValidatorFailure)+",\n")
	s = append(s, "TotalValidatorIgnoredSignatures: "+fmt.Sprintf("%#v", this.TotalValidatorIgnoredSignatures)+",\n")
	s = append(s, "PreviousList: "+fmt.Sprintf("%#v", this.PreviousList)+",\n")
	s = append(s, "PreviousIndex: "+fmt.Sprintf("%#v", this.PreviousIndex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ShardValidatorInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&state.ShardValidatorInfo{")
	s = append(s, "PublicKey: "+fmt.Sprintf("%#v", this.PublicKey)+",\n")
	s = append(s, "ShardId: "+fmt.Sprintf("%#v", this.ShardId)+",\n")
	s = append(s, "List: "+fmt.Sprintf("%#v", this.List)+",\n")
	s = append(s, "Index: "+fmt.Sprintf("%#v", this.Index)+",\n")
	s = append(s, "TempRating: "+fmt.Sprintf("%#v", this.TempRating)+",\n")
	s = append(s, "PreviousList: "+fmt.Sprintf("%#v", this.PreviousList)+",\n")
	s = append(s, "PreviousIndex: "+fmt.Sprintf("%#v", this.PreviousIndex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringValidatorInfo(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ValidatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PreviousIndex != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.PreviousIndex))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if len(m.PreviousList) > 0 {
		i -= len(m.PreviousList)
		copy(dAtA[i:], m.PreviousList)
		i = encodeVarintValidatorInfo(dAtA, i, uint64(len(m.PreviousList)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.TotalValidatorIgnoredSignatures != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.TotalValidatorIgnoredSignatures))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.TotalValidatorFailure != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.TotalValidatorFailure))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.TotalValidatorSuccess != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.TotalValidatorSuccess))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.TotalLeaderFailure != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.TotalLeaderFailure))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.TotalLeaderSuccess != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.TotalLeaderSuccess))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	{
		__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.AccumulatedFees)
		i -= size
		if _, err := __caster.MarshalTo(m.AccumulatedFees, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidatorInfo(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if m.NumSelectedInSuccessBlocks != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.NumSelectedInSuccessBlocks))
		i--
		dAtA[i] = 0x70
	}
	if m.ValidatorIgnoredSignatures != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.ValidatorIgnoredSignatures))
		i--
		dAtA[i] = 0x68
	}
	if m.ValidatorFailure != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.ValidatorFailure))
		i--
		dAtA[i] = 0x60
	}
	if m.ValidatorSuccess != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.ValidatorSuccess))
		i--
		dAtA[i] = 0x58
	}
	if m.LeaderFailure != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.LeaderFailure))
		i--
		dAtA[i] = 0x50
	}
	if m.LeaderSuccess != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.LeaderSuccess))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RewardAddress) > 0 {
		i -= len(m.RewardAddress)
		copy(dAtA[i:], m.RewardAddress)
		i = encodeVarintValidatorInfo(dAtA, i, uint64(len(m.RewardAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.RatingModifier != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RatingModifier))))
		i--
		dAtA[i] = 0x3d
	}
	if m.Rating != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.Rating))
		i--
		dAtA[i] = 0x30
	}
	if m.TempRating != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.TempRating))
		i--
		dAtA[i] = 0x28
	}
	if m.Index != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x20
	}
	if len(m.List) > 0 {
		i -= len(m.List)
		copy(dAtA[i:], m.List)
		i = encodeVarintValidatorInfo(dAtA, i, uint64(len(m.List)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ShardId != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.ShardId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintValidatorInfo(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShardValidatorInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardValidatorInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShardValidatorInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PreviousIndex != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.PreviousIndex))
		i--
		dAtA[i] = 0x38
	}
	if len(m.PreviousList) > 0 {
		i -= len(m.PreviousList)
		copy(dAtA[i:], m.PreviousList)
		i = encodeVarintValidatorInfo(dAtA, i, uint64(len(m.PreviousList)))
		i--
		dAtA[i] = 0x32
	}
	if m.TempRating != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.TempRating))
		i--
		dAtA[i] = 0x28
	}
	if m.Index != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x20
	}
	if len(m.List) > 0 {
		i -= len(m.List)
		copy(dAtA[i:], m.List)
		i = encodeVarintValidatorInfo(dAtA, i, uint64(len(m.List)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ShardId != 0 {
		i = encodeVarintValidatorInfo(dAtA, i, uint64(m.ShardId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.PublicKey) > 0 {
		i -= len(m.PublicKey)
		copy(dAtA[i:], m.PublicKey)
		i = encodeVarintValidatorInfo(dAtA, i, uint64(len(m.PublicKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidatorInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidatorInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovValidatorInfo(uint64(l))
	}
	if m.ShardId != 0 {
		n += 1 + sovValidatorInfo(uint64(m.ShardId))
	}
	l = len(m.List)
	if l > 0 {
		n += 1 + l + sovValidatorInfo(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovValidatorInfo(uint64(m.Index))
	}
	if m.TempRating != 0 {
		n += 1 + sovValidatorInfo(uint64(m.TempRating))
	}
	if m.Rating != 0 {
		n += 1 + sovValidatorInfo(uint64(m.Rating))
	}
	if m.RatingModifier != 0 {
		n += 5
	}
	l = len(m.RewardAddress)
	if l > 0 {
		n += 1 + l + sovValidatorInfo(uint64(l))
	}
	if m.LeaderSuccess != 0 {
		n += 1 + sovValidatorInfo(uint64(m.LeaderSuccess))
	}
	if m.LeaderFailure != 0 {
		n += 1 + sovValidatorInfo(uint64(m.LeaderFailure))
	}
	if m.ValidatorSuccess != 0 {
		n += 1 + sovValidatorInfo(uint64(m.ValidatorSuccess))
	}
	if m.ValidatorFailure != 0 {
		n += 1 + sovValidatorInfo(uint64(m.ValidatorFailure))
	}
	if m.ValidatorIgnoredSignatures != 0 {
		n += 1 + sovValidatorInfo(uint64(m.ValidatorIgnoredSignatures))
	}
	if m.NumSelectedInSuccessBlocks != 0 {
		n += 1 + sovValidatorInfo(uint64(m.NumSelectedInSuccessBlocks))
	}
	{
		__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.AccumulatedFees)
		n += 1 + l + sovValidatorInfo(uint64(l))
	}
	if m.TotalLeaderSuccess != 0 {
		n += 2 + sovValidatorInfo(uint64(m.TotalLeaderSuccess))
	}
	if m.TotalLeaderFailure != 0 {
		n += 2 + sovValidatorInfo(uint64(m.TotalLeaderFailure))
	}
	if m.TotalValidatorSuccess != 0 {
		n += 2 + sovValidatorInfo(uint64(m.TotalValidatorSuccess))
	}
	if m.TotalValidatorFailure != 0 {
		n += 2 + sovValidatorInfo(uint64(m.TotalValidatorFailure))
	}
	if m.TotalValidatorIgnoredSignatures != 0 {
		n += 2 + sovValidatorInfo(uint64(m.TotalValidatorIgnoredSignatures))
	}
	l = len(m.PreviousList)
	if l > 0 {
		n += 2 + l + sovValidatorInfo(uint64(l))
	}
	if m.PreviousIndex != 0 {
		n += 2 + sovValidatorInfo(uint64(m.PreviousIndex))
	}
	return n
}

func (m *ShardValidatorInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PublicKey)
	if l > 0 {
		n += 1 + l + sovValidatorInfo(uint64(l))
	}
	if m.ShardId != 0 {
		n += 1 + sovValidatorInfo(uint64(m.ShardId))
	}
	l = len(m.List)
	if l > 0 {
		n += 1 + l + sovValidatorInfo(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovValidatorInfo(uint64(m.Index))
	}
	if m.TempRating != 0 {
		n += 1 + sovValidatorInfo(uint64(m.TempRating))
	}
	l = len(m.PreviousList)
	if l > 0 {
		n += 1 + l + sovValidatorInfo(uint64(l))
	}
	if m.PreviousIndex != 0 {
		n += 1 + sovValidatorInfo(uint64(m.PreviousIndex))
	}
	return n
}

func sovValidatorInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidatorInfo(x uint64) (n int) {
	return sovValidatorInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ValidatorInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ValidatorInfo{`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`ShardId:` + fmt.Sprintf("%v", this.ShardId) + `,`,
		`List:` + fmt.Sprintf("%v", this.List) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`TempRating:` + fmt.Sprintf("%v", this.TempRating) + `,`,
		`Rating:` + fmt.Sprintf("%v", this.Rating) + `,`,
		`RatingModifier:` + fmt.Sprintf("%v", this.RatingModifier) + `,`,
		`RewardAddress:` + fmt.Sprintf("%v", this.RewardAddress) + `,`,
		`LeaderSuccess:` + fmt.Sprintf("%v", this.LeaderSuccess) + `,`,
		`LeaderFailure:` + fmt.Sprintf("%v", this.LeaderFailure) + `,`,
		`ValidatorSuccess:` + fmt.Sprintf("%v", this.ValidatorSuccess) + `,`,
		`ValidatorFailure:` + fmt.Sprintf("%v", this.ValidatorFailure) + `,`,
		`ValidatorIgnoredSignatures:` + fmt.Sprintf("%v", this.ValidatorIgnoredSignatures) + `,`,
		`NumSelectedInSuccessBlocks:` + fmt.Sprintf("%v", this.NumSelectedInSuccessBlocks) + `,`,
		`AccumulatedFees:` + fmt.Sprintf("%v", this.AccumulatedFees) + `,`,
		`TotalLeaderSuccess:` + fmt.Sprintf("%v", this.TotalLeaderSuccess) + `,`,
		`TotalLeaderFailure:` + fmt.Sprintf("%v", this.TotalLeaderFailure) + `,`,
		`TotalValidatorSuccess:` + fmt.Sprintf("%v", this.TotalValidatorSuccess) + `,`,
		`TotalValidatorFailure:` + fmt.Sprintf("%v", this.TotalValidatorFailure) + `,`,
		`TotalValidatorIgnoredSignatures:` + fmt.Sprintf("%v", this.TotalValidatorIgnoredSignatures) + `,`,
		`PreviousList:` + fmt.Sprintf("%v", this.PreviousList) + `,`,
		`PreviousIndex:` + fmt.Sprintf("%v", this.PreviousIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ShardValidatorInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ShardValidatorInfo{`,
		`PublicKey:` + fmt.Sprintf("%v", this.PublicKey) + `,`,
		`ShardId:` + fmt.Sprintf("%v", this.ShardId) + `,`,
		`List:` + fmt.Sprintf("%v", this.List) + `,`,
		`Index:` + fmt.Sprintf("%v", this.Index) + `,`,
		`TempRating:` + fmt.Sprintf("%v", this.TempRating) + `,`,
		`PreviousList:` + fmt.Sprintf("%v", this.PreviousList) + `,`,
		`PreviousIndex:` + fmt.Sprintf("%v", this.PreviousIndex) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringValidatorInfo(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ValidatorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			m.ShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempRating", wireType)
			}
			m.TempRating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TempRating |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rating", wireType)
			}
			m.Rating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rating |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RatingModifier", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RatingModifier = float32(math.Float32frombits(v))
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardAddress = append(m.RewardAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.RewardAddress == nil {
				m.RewardAddress = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderSuccess", wireType)
			}
			m.LeaderSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderSuccess |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeaderFailure", wireType)
			}
			m.LeaderFailure = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeaderFailure |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSuccess", wireType)
			}
			m.ValidatorSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorSuccess |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorFailure", wireType)
			}
			m.ValidatorFailure = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorFailure |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorIgnoredSignatures", wireType)
			}
			m.ValidatorIgnoredSignatures = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorIgnoredSignatures |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumSelectedInSuccessBlocks", wireType)
			}
			m.NumSelectedInSuccessBlocks = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumSelectedInSuccessBlocks |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumulatedFees", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_kalyan3104_k_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.AccumulatedFees = tmp
				}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLeaderSuccess", wireType)
			}
			m.TotalLeaderSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLeaderSuccess |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalLeaderFailure", wireType)
			}
			m.TotalLeaderFailure = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalLeaderFailure |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValidatorSuccess", wireType)
			}
			m.TotalValidatorSuccess = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalValidatorSuccess |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValidatorFailure", wireType)
			}
			m.TotalValidatorFailure = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalValidatorFailure |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalValidatorIgnoredSignatures", wireType)
			}
			m.TotalValidatorIgnoredSignatures = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalValidatorIgnoredSignatures |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousIndex", wireType)
			}
			m.PreviousIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardValidatorInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidatorInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardValidatorInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardValidatorInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicKey = append(m.PublicKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PublicKey == nil {
				m.PublicKey = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardId", wireType)
			}
			m.ShardId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShardId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TempRating", wireType)
			}
			m.TempRating = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TempRating |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousList = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousIndex", wireType)
			}
			m.PreviousIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipValidatorInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthValidatorInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidatorInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidatorInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidatorInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidatorInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidatorInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidatorInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidatorInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidatorInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidatorInfo = fmt.Errorf("proto: unexpected end of group")
)
